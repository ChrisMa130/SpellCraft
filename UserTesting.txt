	We performed open-ended summative user testing with think-aloud protocols on our application. The majority of our user testing occurred after the design was complete, and so we would have been unable to incorporate major design overhauls into the final product which might have been based on user feedback. Several changes were incorporated into the design based upon user feedback at earlier stages, and these will be covered in this document.

	Prior to performing the user test, users were given time to play with the HoloLens itself so that they could get comfortable with the device and develop a better understanding of how it worked, as well as how it should fit on their head. This also allowed the users to get a better grasp of how to perform the basic gestures used for HoloLens user input, which are native to the device itself. Then users were instructed to launch the application from the HoloLens main menu following the standard procedure for starting any application on the device.

	During the test, users were first instructed to navigate around the menus and help files, so that they could read how to play the game, and develop a basic understanding of the game itself, and the mechanics of playing SpellCraft. They were prompted to ask questions if anything was unclear, or if any of the game mechanics did not make sense to them. After the users indicated they were done reading the game’s in-application information, they were instructed to log in and given the IP address of the computer to connect to. In all instances except for one, the users were not prompted on how to log in, as this information was included in the readme files for the game. This also served to demonstrate whether or not the interface was intuitive enough for a completely new user to grasp. Once the game began, the users were instructed to cast the game’s three spells at the other player (who was the one administering the test).

	Tests were performed in two different locations. Both were living rooms with differing levels of ambient light and plenty of open space. Users were walked through getting to the game itself, and connecting to the game. Users were informed that this was a test of the system and that the system was incomplete, and prompted to think aloud through the process. This was an interesting user test in that we were unable to see what the user was seeing and had to rely exclusively on their spoken word. After the test, users were asked a number of questions about their experience to determine where we might improve the usability of the application.

The first user test was performed before most of the ‘how to’ text files were filled in, and so had to be more directly prompted on how to play the game, but not on how to start the game itself.
Participant 1:
	Age: 23, Female. Student at UW School of Informatics. Gamer (video and board games).
	The first user had no problem logging in to the game, though did need some instruction on how to cast spells. At this time, there was no user feedback to indicate a player’s health to themselves, or how many magic points they had and she called this out as a particularly problematic aspect of the game. 
	
Participant 2:
	Age: 24, Female. Employee at CBRE. Gamer (video and board games).
	The second user had no problem using the application in general. At this time, the UI had been updated to include a health display for both the player and their enemies. However, the display element indicating the enemy player’s health was a sprite which floated above the HoloLens which led to the mistaken assumption that this was the target that the player should aim for. This caused them to send several spells sailing over the tester’s head, until the tester asked them why they were doing that. The feedback from this indicated that the user thought that the sprite was the target, not the other player.
Participant 3:
	Age: 36, Male. Product Manager at Amazon. Gamer (video and board games).
	The third user had no problem using the application in general. At this time, the UI had been updated to include a health display for both the player and their enemies. Before casting spells he asked if players were supposed to fire at the sprite floating above the enemy player’s head, or at the enemy player themselves. He also spent some time firing spells at walls to watch them explode, and once into a mirror to watch it travel very far “into” a wall. The HoloLens does not handle mirrors well.

Feedback:
	After reviewing the feedback from the user testing, we have moved the sprite from above the user’s head to approximately chest level (about half a meter below the camera). This should make for a more intuitive target for the players. Because of the simplistic nature of the sprite, we are considering changing it out for a three-dimensional graphic to better underline the holographic nature of the game. One user commented that the orbs were not particularly interesting looking, as they are currently matte gray spheres. We will be attaching graphical elements to them to improve the look and feel of the orbs so that they are more dynamic. The nature of the UI element indicating a player’s own health has it change size fairly regularly, which may be confusing for some users and we are considering making it stationary, rather than seeking a surface in the direction the user is gazing. However, Microsoft’s development guide recommends against this, as it can lead to an uncomfortable experience for users. We may pursue a middle ground option in the time that remains for the project.

What we learned:
	The HoloLens itself is an interesting device and lends itself well to the application we are developing. However, there are some difficulties as the cameras can be a little picky about hand gestures. Also, it was noted that a player speaking loudly enough could cause all lenses in the area to cast a spell, which is a problem we do not currently have a way to work around. Mirrors completely confound the device, as it doesn’t understand in any way that it is looking at a mirror, and assumes that the room it sees in reflection is in fact a real room.
	
	In general, user evaluation of a product of this degree of complexity seems like it should be a core part of the process. User testing should in fact have begun well before any coding had been performed, as we would have been able to anticipate and work around some of the issues which presented themselves. While developers can user test, it is less helpful when you know the constraints of the system you are working with, and its expected behavior.
